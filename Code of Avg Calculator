const express = require('express');
const axios = require('axios');
const app = express();
const PORT = 3000;
const WINDOW_SIZE = 10;
let numberWindow = [];
const urls = {
    p: 'http://20.244.56.144/evaluation-service/primes',
    f: 'http://20.244.56.144/evaluation-service/fibo',
    e: 'http://20.244.56.144/evaluation-service/even',
    r: 'http://20.244.56.144/evaluation-service/rand'
};
app.get('/numbers/:numberid', async (req, res) => {
    const numberid = req.params.numberid.toLowerCase();
    if (!urls[numberid]) {
        return res.status(400).json({ error: 'Invalid number type' });
    }
    const prevState = [...numberWindow];
    let response;
    try {
        const source = axios.CancelToken.source();
        const timeout = setTimeout(() => source.cancel(), 2000);
        response = await axios.get(urls[numberid], { cancelToken: source.token });
        clearTimeout(timeout);
    } catch (error) {
        return res.status(500).json({ error: 'Failed to fetch from third-party API or request timed out' });
    }
    let newNumbers = response.data.numbers || [];
    newNumbers.forEach(num => {
        if (!numberWindow.includes(num)) {
            numberWindow.push(num);
        }
    });
    if (numberWindow.length > WINDOW_SIZE) {
        numberWindow = numberWindow.slice(-WINDOW_SIZE);
    }
    const average = numberWindow.length > 0 ?
        (numberWindow.reduce((sum, num) => sum + num, 0) / numberWindow.length).toFixed(2) : 0;
    res.json({
        windowPrevState: prevState,
        windowCurrState: numberWindow,
        numbers: newNumbers,
        avg: parseFloat(average)
    });
});
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
